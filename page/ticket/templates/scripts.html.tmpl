<!-- inline page JS and script imports here -->

<script>
  // activate treetop with custom form control attributes
  window.TREETOP_CONFIG = {
    /*
      # Mount Attributes #

      A set of attribute names which can be used to mount JS code and components
      to an element when it is attached to the DOM.

      The components used here are primarily for enhanced keyboard
      control over form inputs and controls.

     */
    mountAttr: {
      autofocus: function (el) {
        // autofocus attribute component will cause an input element
        // to be focused and have the cursor placed at the end of the input.
        el.focus();

        setTimeout(function () {
          // move cursor to the end of the input, this is buggy but non-essential
          if (el.type != "email") {
            el.selectionStart = el.selectionEnd = 10000;
          } else {
            el.select();
          }
        }, 0);
      },

      "enter-submitter": function (el) {
        // specify the form submitter button for an text input ENTER submit
        // Use the attribute value to find the submitter element
        // if none is found, throw an error and do not register the listener
        var submitButtonID = el.getAttribute("enter-submitter");
        var submitButton = document.getElementById(submitButtonID);
        if (!submitButton) {
          throw Error(
            "enter-submitter: No submitter element found for #" + submitButtonID
          );
        }
        function onKeyDown(e) {
          if (e.key == "Enter") {
            e.preventDefault();
            submitButton.click();
          }
        }
        el.addEventListener("keydown", onKeyDown, false);
      },

      "click-on-change": function (el) {
        // when mounted element emits a 'change' event
        // attempt to find the element with the corresponding ID
        // and trigger a click on that element.
        const clickID = el.getAttribute("click-on-change");
        if (!clickID) {
          return;
        }
        el.addEventListener("change", function (evt) {
          if (evt.target.type == "file" && evt.target.files.length === 0) {
            // ignore change event on file input where no files are selected
            return;
          }
          const clickElem = document.getElementById(clickID);
          if (clickElem instanceof HTMLElement) {
            clickElem.click();
          }
        });
      },

      "click-on-input": function (el) {
        // when mounted element emits a 'input' event
        // attempt to find the element with the corresponding ID
        // and trigger a click on that element.
        const clickID = el.getAttribute("click-on-input");
        if (!clickID) {
          return;
        }
        var timeout = null;
        function clickIt() {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          const clickElem = document.getElementById(clickID);
          if (clickElem instanceof HTMLElement) {
            clickElem.click();
          }
        }
        el.addEventListener("input", function (evt) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          // Debounce; wait for a 300 ms pause between input events
          // before triggering the click
          timeout = setTimeout(clickIt, 300);
        });
      },

      "remove-me": function (el) {
        // designate a child element that will cause this element to be
        // removed from the DOM
        const removeQuery = el.getAttribute("remove-me");
        if (!removeQuery) {
          return;
        }
        const removeBtn = el.querySelector(removeQuery);
        if (!removeBtn) {
          return;
        }
        removeBtn.addEventListener("click", function () {
          treetop.unmount(el);
        });
      },

      "dismiss-me": function (el) {
        el.dismissMeHandler = function (evt) {
          switch (evt.type) {
            case "click":
            case "focusin":
              if (evt.target === el || el.contains(evt.target)) {
                return;
              }
              break;
            case "keydown":
              if (evt.key !== "Escape") {
                return;
              }
              break;
          }
          const placeholder = document.createElement("div");
          placeholder.style.display = "none";
          if (el.id) {
            placeholder.id = el.id;
          }
          // replace the element from the DOM with a placeholder
          treetop.mount(placeholder, el);
        };
        document.addEventListener("click", el.dismissMeHandler);
        document.addEventListener("keydown", el.dismissMeHandler);
        document.addEventListener("focusin", el.dismissMeHandler);
      },

      "limit-upload-file-mb": function (el) {
        // Prevent files larger than a specified size from being selected
        // by the file input.
        if (!(el instanceof HTMLInputElement) || el.type !== "file") return;

        const maxMB = parseInt(el.getAttribute("limit-upload-file-mb"), 10);
        if (!maxMB || maxMB < 0) return;
        const maxBytes = maxMB * 1024 * 1024;
        el.addEventListener("change", function (evt) {
          for (let i = 0; i < el.files.length; i++) {
            if (el.files[i].size > maxBytes) {
              alert(
                "File '" +
                el.files[i].name +
                "' is larger than max size of " +
                maxMB +
                "MB"
              );
              el.value = "";
              evt.stopImmediatePropagation();
              return false;
            }
          }
        });
      },
    },

    unmountAttr: {
      "dismiss-me": function (el) {
        if (typeof el.dismissMeHandler === "function") {
          document.removeEventListener("click", el.dismissMeHandler);
          document.removeEventListener("keydown", el.dismissMeHandler);
          document.removeEventListener("focusin", el.dismissMeHandler);
        }
      },
    },

    /*
      # Element Merge #

      When a new element is matched with an existing one, the treetop client
      will swap one for the other by default. However, if the new and old element
      have a matching `treetop-merge` attribute value, and a corresponding functions
      is defined here, that function will be used instead.

     */
    merge: {
      "update-child": function (nue, old) {
        // Having received an update for an element, try only updating a child element.
        // The "data-update-child-id" attribute value will supply an identifier to find
        // the corresponding child elements.
        //
        // If a pair of matching children cannot be found, just do a standard swap.
        const childID = old.getAttribute("data-update-child-id");
        if (childID) {
          const oldChild = old.querySelector("#" + childID);
          const nueChild = nue.querySelector("#" + childID);
          if (
            nueChild instanceof HTMLElement &&
            oldChild instanceof HTMLElement
          ) {
            //  swap the new child for the old one
            treetop.mount(nueChild, oldChild);
            return;
          }
        }
        // fall back on standard element swap
        treetop.mount(nue, old);
      },

      "dedup-append": function (nue, old) {
        const nueChildren = Array.from(nue.children);
        // append children of new element to existing
        // replacing any existing children elements with matching IDs
        for (let i = 0; i < nueChildren.length; i++) {
          const child = nueChildren[i];
          if (child.id) {
            const existing = old.querySelector("#" + child.id);
            if (existing) {
              treetop.mount(child, existing);
              continue;
            }
          }
          // append child to existing DOM node
          treetop.mountChild(child, old);
        }
      },
    },
    onNetworkError: function (xhr) {
      alert("Network Error, check your connection.");
    },
    onUnsupported: function (xhr) {
      alert(
        "Unexpected response following a template request, check network inspector for details."
      );
    },
  };
</script>

<script>
  document.addEventListener("treetopstart", function () {
    document.body.classList.add("active-request");
  });
  document.addEventListener("treetopcomplete", function () {
    document.body.classList.remove("active-request");
  });
</script>
<style>
  body.active-request {
    cursor: wait;
  }

  body.active-request #content {
    pointer-events: none;
  }
</style>

<script defer src="/js/treetop.js"></script>